#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const imageSize = require('image-size');
const Dex = require('./../data/pokemon-showdown/dist/sim/dex').Dex;
const toID = Dex.toID;

process.chdir(path.resolve(__dirname, '..'));

console.log('Updating animated sprite dimensions...');

let buf = `
/*
DO NOT EDIT

THIS FILE IS AUTOGENERATED BY ./build-tools/build-minidex
*/

exports.BattlePokemonSprites = {
  substitute: { exists: false, front: { w: 34, h: 39 }, back: { w: 37, h: 38 } },
`;

let g5buf = `
/*
DO NOT EDIT

THIS FILE IS AUTOGENERATED BY ./build-tools/build-minidex
*/

exports.BattlePokemonSpritesBW = {
`;

async function fetchImageSize(url) {
  try {
    const response = await axios.get(url, { responseType: 'arraybuffer' });
    const dimensions = imageSize(Buffer.from(response.data));
    return dimensions;
  } catch (error) {
    // Handle specific error cases when the file is not found or other network issues
    if (error.response && error.response.status === 404) {
      // File not found (HTTP 404)
      return null;
    } else {
      console.error(`Error fetching image size from ${url}:`, error);
      return null;
    }
  }
}

async function getImageSize(url) {
  try {
    const response = await axios.head(url); // Send a HEAD request to fetch only headers
    const contentLength = response.headers['content-length'];
    return contentLength ? parseInt(contentLength, 10) : 0;
  } catch (error) {
    console.error(`Error fetching image size from ${url}: ${error.message}`);
    return 0; // Return 0 for missing files
  }
}

async function updateSizes() {
  const sizes = {};

  for (const baseid in Dex.data.Pokedex) {
    const species = Dex.species.get(baseid);
    for (const formeName of [''].concat(species.cosmeticFormes || [])) {
      const spriteid = species.spriteid + (formeName ? '-' + toID(formeName).slice(species.id.length) : '');
      const id = toID(spriteid);

      const urlFront = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani/${spriteid}.gif`;
      const urlFrontF = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani/${spriteid}-f.gif`;
      const urlBack = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani-back/${spriteid}.gif`;
      const urlBackF = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani-back/${spriteid}-f.gif`;

      const [front, frontf, back, backf] = await Promise.all([
        fetchImageSize(urlFront),
        fetchImageSize(urlFrontF),
        fetchImageSize(urlBack),
        fetchImageSize(urlBackF),
      ]);

      const row = { num: species.num };

      if (front) row.front = front;
      if (frontf) row.frontf = frontf;
      if (back) row.back = back;
      if (backf) row.backf = backf;

      if (row.front || row.back || !formeName) {
        buf += `\t${id}:` + JSON.stringify(row).replace(/"/g, '') + `,\n`;
      }
    }
  }

  const dataFront = buf.slice(0, -2) + `
};
`;
  fs.writeFileSync('data/pokedex-mini.js', dataFront);

  console.log('DONE updating pokedex-mini.js');
}

async function updateSizesBW() {
  const sizes = {};

  for (const baseid in Dex.data.Pokedex) {
    const species = Dex.species.get(baseid);
    for (const formeName of [''].concat(species.cosmeticFormes || [])) {
      const spriteid = species.spriteid + (formeName ? '-' + toID(formeName).slice(species.id.length) : '');
      const id = toID(spriteid);

      const urlFront = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/gen5ani/${spriteid}.gif`;
      const urlFrontF = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/gen5ani/${spriteid}-f.gif`;
      const urlBack = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/gen5ani-back/${spriteid}.gif`;
      const urlBackF = `https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/gen5ani-back/${spriteid}-f.gif`;

      const [front, frontf, back, backf] = await Promise.all([
        fetchImageSize(urlFront),
        fetchImageSize(urlFrontF),
        fetchImageSize(urlBack),
        fetchImageSize(urlBackF),
      ]);

      const row = { num: species.num };

      if (front) row.front = front;
      if (frontf) row.frontf = frontf;
      if (back) row.back = back;
      if (backf) row.backf = backf;

      if (row.front || row.back || !formeName) {
        g5buf += `\t${id}:` + JSON.stringify(row).replace(/"/g, '') + `,\n`;
      }
    }
  }

  const dataG5 = g5buf.slice(0, -2) + `
};
`;
  fs.writeFileSync('data/pokedex-mini-bw.js', dataG5);

  console.log('DONE updating pokedex-mini-bw.js');
}

async function processImages() {
  const imageUrls = [
    'https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani/bulbasaur-f.gif',
    'https://raw.githubusercontent.com/mummypikachu/sprites/master/sprites/ani-back/bulbasaur-f.gif',
    // Add more URLs here
  ];

  for (const url of imageUrls) {
    const size = await getImageSize(url);
    console.log(`Image size of ${url}: ${size} bytes`);
  }
}

async function main() {
  await processImages();
  await updateSizes();
  await updateSizesBW();
  console.log('Script completed successfully');
}

main()
  .catch((err) => {
    console.error('Script encountered an error:', err);
  });
